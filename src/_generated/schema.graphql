type Query {
  chatList: [ChatRoom!]!
  chatMessageList(pagination: PaginatedInput, data: ChatMessageListInput!): ChatMessagePaginated!
  userLogin(data: UserLoginInput!): String!
  userGetCurrent: User
}

type ChatRoom {
  id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  users: [User!]!
}

type User {
  id: ID!
  createdAt: String!
  updatedAt: String!
  email: String!
  userToChatRooms: [UserToChatRoom!]!
  chatMessages: [ChatMessage!]!
}

type UserToChatRoom {
  id: ID!
  createdAt: String!
  updatedAt: String!
  userId: String!
  chatRoomId: String!
  role: String!
  user: User!
  chatRoom: ChatRoom!
}

type ChatMessage {
  id: ID!
  createdAt: String!
  updatedAt: String!
  text: String!
  author: User!
  chatRoom: ChatRoom!
}

type ChatMessagePaginated {
  data: [ChatMessage!]!
  pageMeta: PaginatedPageMeta!
}

type PaginatedPageMeta {
  hasMore: Boolean!
}

input PaginatedInput {
  initTimestamp: Float!
  skip: Float!
  limit: Float!
}

input ChatMessageListInput {
  chatRoomId: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

type Mutation {
  chatCreate(data: ChatCreateInput!): ChatRoom!
  chatMessageSend(data: ChatMessageSendInput!): ChatMessage!
  userSignup(data: UserSignupInput!): String!
}

input ChatCreateInput {
  name: String!
  userIds: [String!]!
}

input ChatMessageSendInput {
  chatRoomId: String!
  text: String!
}

input UserSignupInput {
  email: String!
  password: String!
}
